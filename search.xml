<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>win32事件</title>
      <link href="/2024/09/15/win32%E4%BA%8B%E4%BB%B6/"/>
      <url>/2024/09/15/win32%E4%BA%8B%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="内核对象"><a href="#内核对象" class="headerlink" title="内核对象"></a>内核对象</h1><hr><hr><h2 id="1、什么是内核对象"><a href="#1、什么是内核对象" class="headerlink" title="1、什么是内核对象"></a>1、什么是内核对象</h2><hr><p><img src="/../images/1.png" alt="avater"></p><h3 id="内核对象："><a href="#内核对象：" class="headerlink" title="内核对象："></a>内核对象：</h3><ul><li>进程</li><li>线程</li><li>文件</li><li>文件映射</li><li>事件</li><li>互斥体等待</li></ul><h2 id="2、事件内核创建"><a href="#2、事件内核创建" class="headerlink" title="2、事件内核创建"></a>2、事件内核创建</h2><hr><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">HANDLE <span class="title function_">CreateEventA</span><span class="params">(</span></span><br><span class="line"><span class="params">  [in, optional] LPSECURITY_ATTRIBUTES lpEventAttributes,</span></span><br><span class="line"><span class="params">  [in]           BOOL                  bManualReset,</span></span><br><span class="line"><span class="params">  [in]           BOOL                  bInitialState,</span></span><br><span class="line"><span class="params">  [in, optional] LPCSTR                lpName</span></span><br><span class="line"><span class="params">)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建事件内核对象</span></span><br><span class="line">HANDLE g_hEvent = CreateEvent(<span class="literal">NULL</span>,TRUE,FALSE,<span class="string">&quot;XYZ&quot;</span>);</span><br><span class="line"><span class="comment">// 创建互斥体对象</span></span><br><span class="line">HANDLE g_hMutex = CreateMutex(<span class="literal">NULL</span>,FALSE,<span class="string">&quot;XYZ&quot;</span>)</span><br></pre></td></tr></table></figure><p><code>CreateEvent</code> 函数参数解释：</p><ul><li><code>lpEventAttributes</code> : 安全属性</li><li><code>bManualReset</code> : 如果值为TRUE，在获取事件对象后要手动设置未通知；如果为FALSE，则自动变成未通知</li><li><code>bInitialState</code> : 设置事件初始发送信号的状态，TRUE为初始已通知，FALSE为初始未通知</li><li><code>lpName</code> : 事件对象的名称。(只用在进程间才需要用到)</li></ul><h2 id="3、事件内核对象的获取"><a href="#3、事件内核对象的获取" class="headerlink" title="3、事件内核对象的获取"></a>3、事件内核对象的获取</h2><hr><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">HANDLE <span class="title function_">OpenEvent</span><span class="params">(</span></span><br><span class="line"><span class="params">DWORD dwDesiredAccess,    <span class="comment">// access</span></span></span><br><span class="line"><span class="params">BOOL bInheritHandle,      <span class="comment">// ingeritance option</span></span></span><br><span class="line"><span class="params">LPCTSTR lpName            <span class="comment">// object name</span></span></span><br><span class="line"><span class="params">)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事件内核对象的获取</span></span><br><span class="line">HANDLE g_hEvent = OpenEvent(EVENT_ALL_ACCESS , FALSE,<span class="string">&quot;XYZ&quot;</span>);</span><br><span class="line"><span class="comment">// 互斥体内核对象的获取</span></span><br><span class="line">HANDLE g_hMutex = OpenMutex(MUTEX_ALL_ACCESS,FALSE,<span class="string">&quot;XYZ&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="4、内核对象的销毁"><a href="#4、内核对象的销毁" class="headerlink" title="4、内核对象的销毁"></a>4、内核对象的销毁</h2><hr><p><code>BOOL CloseHandle(HANDLE hobj);</code></p><ol><li>当没有其他程序引用时，系统会销毁内核对象（使用数量）</li><li>内核对象的生命周期，可能比创建它的对象要长</li></ol><h3 id="实验验证："><a href="#实验验证：" class="headerlink" title="实验验证："></a>实验验证：</h3><p>进程一创建内核对象，进程二获取内核对象，进程一销毁内核对象，进程三依旧可以获取内核对象，通俗个人理解：因为有两个人在使用，一个人销毁了，还有另外一个人可以找</p><ul><li>首先要明白<strong>计数器</strong>的概念，在高2g内存(内核)有一个结构体存储着这些参数，进程一创建对象，计数器+1，进程二获取对象，计数器+1，进程一销毁对象，计数器-1，所以当进程三去获取内核对象时，计数器里面还剩1个可以获取</li></ul><h1 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h1><hr><hr><h2 id="1、事件对象的创建"><a href="#1、事件对象的创建" class="headerlink" title="1、事件对象的创建"></a>1、事件对象的创建</h2><hr><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">HANDLE <span class="title function_">CreateEvent</span><span class="params">(</span></span><br><span class="line"><span class="params">LPSECURITY_ATTRIBUTES lpEventAttributes,      <span class="comment">// 安全属性 NULL时为系统默认</span></span></span><br><span class="line"><span class="params">BOOL bManualReset,                            <span class="comment">// TRUE 通过调用ResetEvent将事件对象标记为未通知</span></span></span><br><span class="line"><span class="params">BOOL bInitialState,                           <span class="comment">// TRUE 已通知状态 FALSE未通知状态（初始）</span></span></span><br><span class="line"><span class="params">LPCTSTR lpName                                <span class="comment">// 对象名称，以NULL结尾的字符串</span></span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure><h2 id="2、事件对象的控制"><a href="#2、事件对象的控制" class="headerlink" title="2、事件对象的控制"></a>2、事件对象的控制</h2><hr><p><code>BOOL SetEvent(HANDLE hEvent);</code>  &#x2F;&#x2F; 将对象设置为已通知</p><h3 id="对已通知、未通知的理解："><a href="#对已通知、未通知的理解：" class="headerlink" title="对已通知、未通知的理解："></a>对已通知、未通知的理解：</h3><p>简单来说就是未通知时，不会发出信号，其他线程会在WaitForSingleObject的作用下阻塞，当对象变成已通知时，获取到对象的线程才能通过WaitForSingleObject进行执行下去</p><h2 id="3、线程控制实验：只读形式的线程控制"><a href="#3、线程控制实验：只读形式的线程控制" class="headerlink" title="3、线程控制实验：只读形式的线程控制"></a>3、线程控制实验：只读形式的线程控制</h2><hr><h3 id="实验一："><a href="#实验一：" class="headerlink" title="实验一："></a>实验一：</h3><p><code>CreateEvent</code> 的第二个参数设置成TRUE，即要手动设置成未通知</p><p>ThreadMain线程函数：</p><p><img src="/./../images/image-20240915190756532.png" alt="image-20240915190756532"></p><p>其他三个线程，开始时用WaitForSingleObject阻塞住：</p><p><img src="/./../images/image-20240915190825087.png" alt="image-20240915190825087"></p><p>当Thread1程序跑到<code>SetEvent</code>后，三个文本框同时出现1000，主线程里修改对象状态为已通知时，第一个线程wait到了，执行完后状态依旧是已通知（因为我们第二个参数为TRUE，需要手动使用设置成未通知），所以三个编辑框都可以读取到</p><p><img src="/./../images/image-20240915190845413.png" alt="image-20240915190845413"></p><h3 id="实验二："><a href="#实验二：" class="headerlink" title="实验二："></a>实验二：</h3><p><code>CreateEvent</code> 的第二个参数设置成FALSE，即Wait后自动设置成未通知</p><p>此时其他线程在函数执行完的位置要加上SetEvent(hEvent);来将事件对象设置成已通知</p><p><img src="/./../images/image-20240915190855897.png" alt="image-20240915190855897"></p><p>执行代码，下面三个文本框是一个一个变成1000的，因为设置成FALSE后当线程wait到事件对象时就会自动设置成未通知状态，其他线程就无法使用，得等到我这个线程用完并用SetEvent将其设置成已通知其他线程才能用，从而可以实现互斥</p><h1 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h1><hr><h2 id="1、什么是线程同步？"><a href="#1、什么是线程同步？" class="headerlink" title="1、什么是线程同步？"></a>1、什么是线程同步？</h2><hr><h3 id="线程同步："><a href="#线程同步：" class="headerlink" title="线程同步："></a>线程同步：</h3><p>通俗来讲就是两个或以上的线程运行要严格按照规定的某种先后次序来运行，这种先后次序依赖于要完成的特定的任务。按预定的先后次序运行。比如 A 任务的运行依赖于 B 任务产生的数据。</p><h3 id="线程互斥："><a href="#线程互斥：" class="headerlink" title="线程互斥："></a>线程互斥：</h3><p>与线程同步不同，线程互斥只是当这个线程运行时，其他线程不能运行，得等到我这个线程运行完才能执行，没有顺序要求</p><h2 id="2、代码实验"><a href="#2、代码实验" class="headerlink" title="2、代码实验"></a>2、代码实验</h2><hr><p>实现两个线程严格的交替输出。<br>首先先用互斥或者临界区来看看能不能实现：<br>代码1（临界区）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">CRITICAL_SECTION g_cs;</span><br><span class="line"><span class="type">int</span> g_Max = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> g_Number = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//生产者线程函数  </span></span><br><span class="line">DWORD WINAPI <span class="title function_">ThreadProduct</span><span class="params">(LPVOID pM)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; g_Max; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//互斥的访问缓冲区  </span></span><br><span class="line">EnterCriticalSection(&amp;g_cs);</span><br><span class="line">g_Number = <span class="number">1</span>;</span><br><span class="line">DWORD id = GetCurrentThreadId();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;生产者%d将数据%d放入缓冲区\n&quot;</span>, id, g_Number);</span><br><span class="line">LeaveCriticalSection(&amp;g_cs);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//消费者线程函数</span></span><br><span class="line">DWORD WINAPI <span class="title function_">ThreadConsumer</span><span class="params">(LPVOID pM)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; g_Max; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//互斥的访问缓冲区  </span></span><br><span class="line">EnterCriticalSection(&amp;g_cs);</span><br><span class="line">g_Number = <span class="number">0</span>;</span><br><span class="line">DWORD id = GetCurrentThreadId();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;----消费者%d将数据%d放入缓冲区\n&quot;</span>, id, g_Number);</span><br><span class="line">LeaveCriticalSection(&amp;g_cs);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">InitializeCriticalSection(&amp;g_cs);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">HANDLE hThread[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">hThread[<span class="number">0</span>] = ::CreateThread(<span class="literal">NULL</span>, <span class="number">0</span>, ThreadProduct, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">hThread[<span class="number">1</span>] = ::CreateThread(<span class="literal">NULL</span>, <span class="number">0</span>, ThreadConsumer, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">WaitForMultipleObjects(<span class="number">2</span>, hThread, TRUE, INFINITE);</span><br><span class="line">CloseHandle(hThread[<span class="number">0</span>]);</span><br><span class="line">CloseHandle(hThread[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">//销毁 </span></span><br><span class="line">DeleteCriticalSection(&amp;g_cs);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><p><img src="/./../images/image-20240915190909087.png" alt="image-20240915190909087"></p><p>代码2（互斥体）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">HANDLE hMutex;</span><br><span class="line"><span class="type">int</span> g_Max = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> g_Number = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//生产者线程函数  </span></span><br><span class="line">DWORD WINAPI <span class="title function_">ThreadProduct</span><span class="params">(LPVOID pM)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; g_Max; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//互斥的访问缓冲区  </span></span><br><span class="line">WaitForSingleObject(hMutex, INFINITE);</span><br><span class="line">g_Number = <span class="number">1</span>;</span><br><span class="line">DWORD id = GetCurrentThreadId();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;生产者%d将数据%d放入缓冲区\n&quot;</span>, id, g_Number);</span><br><span class="line">ReleaseMutex(hMutex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//消费者线程函数</span></span><br><span class="line">DWORD WINAPI <span class="title function_">ThreadConsumer</span><span class="params">(LPVOID pM)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; g_Max; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//互斥的访问缓冲区  </span></span><br><span class="line">WaitForSingleObject(hMutex, INFINITE);</span><br><span class="line">g_Number = <span class="number">0</span>;</span><br><span class="line">DWORD id = GetCurrentThreadId();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;----消费者%d将数据%d放入缓冲区\n&quot;</span>, id, g_Number);</span><br><span class="line">ReleaseMutex(hMutex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//创建一个互斥体</span></span><br><span class="line">hMutex = CreateMutex(<span class="literal">NULL</span>, FALSE, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">HANDLE hThread[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">hThread[<span class="number">0</span>] = ::CreateThread(<span class="literal">NULL</span>, <span class="number">0</span>, ThreadProduct, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">hThread[<span class="number">1</span>] = ::CreateThread(<span class="literal">NULL</span>, <span class="number">0</span>, ThreadConsumer, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">WaitForMultipleObjects(<span class="number">2</span>, hThread, TRUE, INFINITE);</span><br><span class="line">CloseHandle(hThread[<span class="number">0</span>]);</span><br><span class="line">CloseHandle(hThread[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">//销毁 </span></span><br><span class="line">CloseHandle(hMutex);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><p><img src="/./../images/20240912215204.png" alt="Pasted image 20240912215204"></p><p>发现不管时临界区，还是互斥体都无法实现严格的交替输出，这时，我们就可以用事件来实现。</p><blockquote><p>事件是可以自动设置成未通知，然后通过SetEvent来设置成已通知的，对于两个线程，我们就可以通过两个事件来实现线程同步，具体代码如下:</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">HANDLE hEvent1,hEvent2;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DWORD WINAPI <span class="title function_">ThreadProc1</span><span class="params">(LPVOID lpParameter)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">5</span>;i++)&#123;</span><br><span class="line">WaitForSingleObject(hEvent1, INFINITE);</span><br><span class="line">DWORD id = GetCurrentThreadId();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;生产者 %d 将数据 1 放入缓冲区\n&quot;</span>,id);</span><br><span class="line">SetEvent(hEvent2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DWORD WINAPI <span class="title function_">ThreadProc2</span><span class="params">(LPVOID lpParameter)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">WaitForSingleObject(hEvent2, INFINITE);</span><br><span class="line">DWORD id = GetCurrentThreadId();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;----消费者 %d 将数据 1 取出缓冲区\n&quot;</span>,id);</span><br><span class="line">SetEvent(hEvent1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">HANDLE hThread[<span class="number">2</span>];</span><br><span class="line">hThread[<span class="number">0</span>] = ::CreateThread(<span class="literal">NULL</span>, <span class="number">0</span>, ThreadProc1, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">hThread[<span class="number">1</span>] = ::CreateThread(<span class="literal">NULL</span>, <span class="number">0</span>, ThreadProc2, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">hEvent1 = CreateEvent(<span class="literal">NULL</span>, FALSE, TRUE, <span class="literal">NULL</span>);</span><br><span class="line">hEvent2 = CreateEvent(<span class="literal">NULL</span>, FALSE, FALSE, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">WaitForMultipleObjects(<span class="number">2</span>, hThread, TRUE, INFINITE);</span><br><span class="line">CloseHandle(hThread[<span class="number">0</span>]);</span><br><span class="line">CloseHandle(hThread[<span class="number">1</span>]);</span><br><span class="line">CloseHandle(hEvent1);</span><br><span class="line">CloseHandle(hEvent2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到输出已经是严格交替了：</p><p><img src="/./../images/image-20240915190925802.png" alt="image-20240915190925802"></p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><hr><ol><li>线程同步的实现：可以用事件来实现，有几个线程就创建多少个事件对象，全部都设置成自动变成未通知状态，第一个启动的线程要在将事件对象的初始状态设置成已通知，然后通过一个线程控制另一个线程的启动。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 滴水三期 </category>
          
          <category> win32 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/09/15/hello-world/"/>
      <url>/2024/09/15/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
