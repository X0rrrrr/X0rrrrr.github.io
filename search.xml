<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>win32进程创建_句柄表</title>
      <link href="/2024/09/16/win32-create-process/"/>
      <url>/2024/09/16/win32-create-process/</url>
      
        <content type="html"><![CDATA[<h1 id="win32-进程创建-句柄表"><a href="#win32-进程创建-句柄表" class="headerlink" title="win32 进程创建_句柄表"></a>win32 进程创建_句柄表</h1><hr><p>在之前的学习中，我们了解到了，程序、镜像(ImageBuffer)、进程。那么这三个有什么区别呢？</p><blockquote><p>通俗来讲程序就是写好的.exe但是还没有运行，死的一个东西；镜像是将程序按照PE格式拉伸贴到4GB空间中的东西，而进程就是这个镜像跑起来后的东西。当eip”给到”这个ImageBufffer时这个就运行起来了</p></blockquote><p>父进程创建子进程，父进程挂了子进程不会挂</p><h2 id="一、进程创建的过程"><a href="#一、进程创建的过程" class="headerlink" title="一、进程创建的过程"></a>一、进程创建的过程</h2><hr><p><img src="/./win32-create-process/image-20240916164833028.png" alt="image-20240916164833028"></p><h3 id="步骤一："><a href="#步骤一：" class="headerlink" title="步骤一："></a>步骤一：</h3><p>当系统启动后，会创建一个进程：Explorer.exe 也就是桌面进程。</p><h3 id="步骤二："><a href="#步骤二：" class="headerlink" title="步骤二："></a>步骤二：</h3><p>当用户双击某一个exe时，Explorer 进程使用CreateProcess函数创建被双击的exe，也就是说：我们在桌面上双击创建的进程都是Explorer进程的子进程。</p><p>我们可以通过XueTr.exe ，查看那些进程是由Explorer创建的。</p><p><img src="/./win32-create-process/image-20240916173018779.png" alt="image-20240916173018779"></p><h2 id="二、CreateProcess函数做了什么"><a href="#二、CreateProcess函数做了什么" class="headerlink" title="二、CreateProcess函数做了什么"></a>二、CreateProcess函数做了什么</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">BOOL <span class="title function_">CreateProcess</span><span class="params">(</span></span><br><span class="line"><span class="params">    LPCTSTR lpApplicationName,                 <span class="comment">// name of executable module</span></span></span><br><span class="line"><span class="params">    LPTSTR lpCommandLine,                      <span class="comment">// command line string</span></span></span><br><span class="line"><span class="params">    LPSECURITY_ATTRIBUTES lpProcessAttributes, <span class="comment">// SD</span></span></span><br><span class="line"><span class="params">    LPSECURITY_ATTRIBUTES lpThreadAttributes,  <span class="comment">// SD</span></span></span><br><span class="line"><span class="params">    BOOL bInheritHandles,                      <span class="comment">// handle inheritance option</span></span></span><br><span class="line"><span class="params">    DWORD dwCreationFlags,                     <span class="comment">// creation flags</span></span></span><br><span class="line"><span class="params">    LPVOID lpEnvironment,                      <span class="comment">// new environment block</span></span></span><br><span class="line"><span class="params">    LPCTSTR lpCurrentDirectory,                <span class="comment">// current directory name</span></span></span><br><span class="line"><span class="params">    LPSTARTUPINFO lpStartupInfo,               <span class="comment">// startup information</span></span></span><br><span class="line"><span class="params">    LPPROCESS_INFORMATION lpProcessInformation <span class="comment">// process information</span></span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure><h4 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h4><p>现在先主要了解几个，其他的等用到再了解：</p><ol><li><code>lpApplicationName</code> : 要执行的程序的名称，字符串可以指定要执行的模块的完整路径和文件名，也可以指定部分名称。如果只有程序名称没有路径，则系统会按照以下顺序解释：</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">c:\program.exe</span><br><span class="line">c：\program files\sub.exe</span><br><span class="line">c：\program files\sub dir\program.exe</span><br><span class="line">c：\program files\sub dir\program name.exe</span><br></pre></td></tr></table></figure><ol start="2"><li><p><code>[in, out, optional] lpCommandLine</code> : 要执行的命令行</p></li><li><p><code>[in] bInheritHandles</code> : 如果这个参数为TRUE，句柄表可继承的句柄都会被由这个进程创建的进程继承。如：A进程句柄表中的存在0x1句柄，并且这个句柄可以被继承，如果A进程通过CreateProcess创建出进程B则进程B，就能继承这个0x1</p></li><li><p><code>[in] lpStartupInfo</code> : 指向<a href="https://learn.microsoft.com/zh-cn/windows/desktop/api/processthreadsapi/ns-processthreadsapi-startupinfoa">STARTUPINFO</a>或<a href="https://learn.microsoft.com/zh-cn/windows/desktop/api/winbase/ns-winbase-startupinfoexa">STARTUPINFOEX</a>结构的指针，当不使用时，必须用CloseHandle关闭他们。</p></li><li><p><code>[out] lpProcessInformation</code> : 指向接收有关新进程的标识信息的 <a href="https://learn.microsoft.com/zh-cn/windows/desktop/api/processthreadsapi/ns-processthreadsapi-process_information">PROCESS_INFORMATION</a> 结构的指针。</p></li></ol><h3 id="1、创建内核对象"><a href="#1、创建内核对象" class="headerlink" title="1、创建内核对象"></a>1、创建内核对象</h3><p><img src="/./win32-create-process/image-20240916173423991.png" alt="image-20240916173423991"></p><p>当CreateProcess后，就会创建这个句柄表，但是这个表刚刚创建的时候是空的。得做Create内核对象时计数器++，然后往表里面写东西。</p><p><strong>句柄表</strong>：第一列就是句柄，也就是我们常用的hThread之类的，相当与是内核对象的编号；第二列是内核对象的真正地址，第三列表示能不能被继承</p><h3 id="2、分配4GB的虚拟内存空间-Windows-32位"><a href="#2、分配4GB的虚拟内存空间-Windows-32位" class="headerlink" title="2、分配4GB的虚拟内存空间(Windows 32位)"></a>2、分配4GB的虚拟内存空间(Windows 32位)</h3><p><img src="/./win32-create-process/image-20240916173854180.png" alt="image-20240916173854180"></p><p>创建线程的过程：</p><ol><li>将exe拉伸，存储到指定位置</li><li>遍历exe导入表，将需要用到的dll拉伸存储到指定位置，如果位置被占用，换地方，并通过DLL的重定位表，修复全局</li><li>DLL如果引用了其他DLL，递归第二步</li><li>修复exe&#x2F;dll中的IAT表</li><li>创建线程、设置线程CONTEXT开始执行</li></ol><h3 id="3、创建进程的主线程"><a href="#3、创建进程的主线程" class="headerlink" title="3、创建进程的主线程"></a>3、创建进程的主线程</h3><p><img src="/./win32-create-process/image-20240916174230289.png" alt="image-20240916174230289"></p><h2 id="三、创建进程-示例代码"><a href="#三、创建进程-示例代码" class="headerlink" title="三、创建进程(示例代码)"></a>三、创建进程(示例代码)</h2><hr><h4 id="代码一："><a href="#代码一：" class="headerlink" title="代码一："></a>代码一：</h4><p>通过名字创建，也就是CreateProcess第一个参数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">VOID <span class="title function_">TestCreateProcessByAPPName</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">STARTUPINFO si = &#123;<span class="number">0</span>&#125;;   </span><br><span class="line">    PROCESS_INFORMATION pi;</span><br><span class="line"></span><br><span class="line">si.cb = <span class="keyword">sizeof</span>(si);</span><br><span class="line"></span><br><span class="line">TCHAR szApplicationName[] =TEXT(文件路径);<span class="comment">// 这里是程序的绝对地址</span></span><br><span class="line"></span><br><span class="line">BOOL res = CreateProcess(</span><br><span class="line">szApplicationName, </span><br><span class="line"><span class="literal">NULL</span>, </span><br><span class="line"><span class="literal">NULL</span>, </span><br><span class="line"><span class="literal">NULL</span>, </span><br><span class="line">FALSE, </span><br><span class="line">CREATE_NEW_CONSOLE, </span><br><span class="line"><span class="literal">NULL</span>, </span><br><span class="line"><span class="literal">NULL</span>, &amp;si, &amp;pi); </span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/./win32-create-process/image-20240916175237084.png" alt="image-20240916175237084"></p><p>执行后直接打开了pe查看器</p><h4 id="代码二："><a href="#代码二：" class="headerlink" title="代码二："></a>代码二：</h4><p>通过命令行打开（参数二）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">VOID <span class="title function_">TestCreateProcessByCmdline</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">STARTUPINFO si = &#123;<span class="number">0</span>&#125;;   </span><br><span class="line">    PROCESS_INFORMATION pi;</span><br><span class="line"></span><br><span class="line">si.cb = <span class="keyword">sizeof</span>(si);</span><br><span class="line"></span><br><span class="line">TCHAR szCmdline[] =TEXT(<span class="string">&quot;c://program files//internet explorer//iexplore.exe http://www.ifeng.com&quot;</span>);<span class="comment">// 程序路径 如果是浏览器还可以空格后面加网址</span></span><br><span class="line"></span><br><span class="line">BOOL res = CreateProcess(</span><br><span class="line"><span class="literal">NULL</span>, </span><br><span class="line">szCmdline, </span><br><span class="line"><span class="literal">NULL</span>, </span><br><span class="line"><span class="literal">NULL</span>, </span><br><span class="line">FALSE, </span><br><span class="line">CREATE_NEW_CONSOLE, </span><br><span class="line"><span class="literal">NULL</span>, </span><br><span class="line"><span class="literal">NULL</span>, &amp;si, &amp;pi); </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="代码三："><a href="#代码三：" class="headerlink" title="代码三："></a>代码三：</h4><p>两个参数一起：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">VOID <span class="title function_">TestCreateProcess</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">STARTUPINFO si = &#123;<span class="number">0</span>&#125;;   </span><br><span class="line">    PROCESS_INFORMATION pi;</span><br><span class="line"></span><br><span class="line">si.cb = <span class="keyword">sizeof</span>(si);</span><br><span class="line"></span><br><span class="line">TCHAR szCmdline[] =TEXT(<span class="string">&quot; http://www.ifeng.com&quot;</span>);</span><br><span class="line"></span><br><span class="line">BOOL res = CreateProcess(</span><br><span class="line">TEXT(<span class="string">&quot;c://program files//internet explorer//iexplore.exe&quot;</span>), </span><br><span class="line">szCmdline, </span><br><span class="line"><span class="literal">NULL</span>, </span><br><span class="line"><span class="literal">NULL</span>, </span><br><span class="line">FALSE, </span><br><span class="line">CREATE_NEW_CONSOLE, </span><br><span class="line"><span class="literal">NULL</span>, </span><br><span class="line"><span class="literal">NULL</span>, &amp;si, &amp;pi); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来看看最后两个结构体是什么东西：</p><h5 id="STARTUPINFO："><a href="#STARTUPINFO：" class="headerlink" title="STARTUPINFO："></a>STARTUPINFO：</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">STARTUPINFO</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">   DWORD cb;</span><br><span class="line">   PSTR lpReserved;</span><br><span class="line">   PSTR lpDesktop;</span><br><span class="line">   PSTR lpTitle;</span><br><span class="line">   DWORD dwX;</span><br><span class="line">   DWORD dwY;</span><br><span class="line">   DWORD dwXSize;</span><br><span class="line">   DWORD dwYSize;</span><br><span class="line">   DWORD dwXCountChars;</span><br><span class="line">   DWORD dwYCountChars;</span><br><span class="line">   DWORD dwFillAttribute;</span><br><span class="line">   DWORD dwFlags;</span><br><span class="line">   WORD wShowWindow;</span><br><span class="line">   WORD cbReserved2;</span><br><span class="line">   PBYTE lpReserved2;</span><br><span class="line">   HANDLE hStdInput;</span><br><span class="line">   HANDLE hStdOutput;</span><br><span class="line">   HANDLE hStdError;</span><br><span class="line">&#125; STARTUPINFO, *LPSTARTUPINFO;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个结构体是用来设定要创建的应用程序的属性，比如可以指定新创建的控制台程序的标题等待。<strong>一般情况下</strong> 只用给第一个成员赋值就可以了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">si.cb = <span class="keyword">sizeof</span>(si);</span><br></pre></td></tr></table></figure><h5 id="PROCESS-INFORMATION"><a href="#PROCESS-INFORMATION" class="headerlink" title="PROCESS_INFORMATION:"></a>PROCESS_INFORMATION:</h5><p>也就是最后一个参数的结构体</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">PROCESS_INFORMATION</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">   HANDLE hProcess;<span class="comment">//进程句柄</span></span><br><span class="line">   HANDLE hThread;<span class="comment">//主线程句柄</span></span><br><span class="line">   DWORD dwProcessId;<span class="comment">//进程ID</span></span><br><span class="line">   DWORD dwThreadId;<span class="comment">//线程ID</span></span><br><span class="line">&#125; PROCESS_INFORMATION;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在CreateProcess函数参数说明中，这个参数前面有一个[out]的东西，说明这个是CreateProcess函数输出的详细。这个结构是用来存放 进程和主线程的句柄和ID的，我们可以用以下代码来查看:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;dwProcessId: %x dwThreadId: %x\nhProcess: %x hThread: %x\n&quot;</span>, pi.dwProcessId, pi.dwThreadId, pi.hProcess, pi.hThread);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出：</p><p><img src="/./win32-create-process/image-20240916180342294.png" alt="image-20240916180342294"></p><h4 id="关于句柄和ID"><a href="#关于句柄和ID" class="headerlink" title="关于句柄和ID"></a>关于句柄和ID</h4><ol><li>都是系统分配的一个编号，句柄是客户程序使用，ID主要是系统调度时使用</li><li>调用CloseHandle关闭进程或者线程句柄的时候，只是让内核计数器减少一，并不是终止进程或者线程。<strong>进程猴子线程将继续运行，直到它自己终止运行</strong></li><li>在进程执行过程中，进程Id与线程id 是不可能相同的。但是不要通过进程或者线程ID来操作进程或者线程，因为当进程关闭或意外中断再打开后id就不是原来的ID了，因为系统会把这个ID给了其他进程或者线程</li></ol><h2 id="四、进程终止"><a href="#四、进程终止" class="headerlink" title="四、进程终止"></a>四、进程终止</h2><hr><h4 id="进程终止的三种方式："><a href="#进程终止的三种方式：" class="headerlink" title="进程终止的三种方式："></a>进程终止的三种方式：</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">VOID <span class="title function_">ExitProcess</span><span class="params">(UINT fuExitCode)</span><span class="comment">// 进程会自己调用</span></span><br><span class="line">BOOL <span class="title function_">TerminateProcess</span><span class="params">(HANDLE hProcess, UINT fuExitCode)</span>;<span class="comment">// 终止其他进程</span></span><br><span class="line">ExitThread<span class="comment">// 终止所有线程，系统就会把进程杀掉</span></span><br></pre></td></tr></table></figure><h4 id="获取进程的退出码："><a href="#获取进程的退出码：" class="headerlink" title="获取进程的退出码："></a>获取进程的退出码：</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BOOL <span class="title function_">GetExitCodeProcess</span><span class="params">(HANDLE hProcess, PDWORD pdwExitCode)</span>;</span><br></pre></td></tr></table></figure><h4 id="进程终止时相关操作："><a href="#进程终止时相关操作：" class="headerlink" title="进程终止时相关操作："></a>进程终止时相关操作：</h4><ol><li>进程中剩余的所有线程全部停止运行</li><li>进程指定的所有用户对象均被释放，所有内核对象均被关闭</li><li>进程内核对象的状态变成收到通知的状态</li><li>进程内核对象的使用计数递减1</li></ol><h2 id="五、句柄的继承"><a href="#五、句柄的继承" class="headerlink" title="五、句柄的继承"></a>五、句柄的继承</h2><hr><p><strong>让不同进程间拥有相同的内核对象</strong></p><p>首先先了解一下需要用到的知识</p><h4 id="1、命令行参数的使用"><a href="#1、命令行参数的使用" class="headerlink" title="1、命令行参数的使用"></a>1、命令行参数的使用</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> szBuffer[<span class="number">256</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="built_in">memcpy</span>(szBuffer,argv[<span class="number">1</span>],<span class="number">8</span>);</span><br><span class="line">DWORD dwHandle = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">sscanf</span>(szBuffer,<span class="string">&quot;%x&quot;</span>,&amp;dwHandle);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,argv[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%x\n&quot;</span>,dwHandle);</span><br><span class="line">getchar();</span><br></pre></td></tr></table></figure><h4 id="2、-句柄的继承"><a href="#2、-句柄的继承" class="headerlink" title="2、 句柄的继承"></a>2、 句柄的继承</h4><blockquote><p>我们可以通过创建一个事件内核对象来验证这个句柄的继承：</p></blockquote><h4 id="进程A中的代码："><a href="#进程A中的代码：" class="headerlink" title="进程A中的代码："></a>进程A中的代码：</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">VOID <span class="title function_">TestExtendHandle</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">CHAR szBuffer[<span class="number">256</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="built_in">memset</span>(szBuffer, <span class="number">0</span>, <span class="number">256</span>);</span><br><span class="line">CHAR szHandle[<span class="number">8</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 若要成功创建能继承的句柄，父进程必须指定一个SECURITY_ATTRIBUTES并对它进行初始化</span></span><br><span class="line"><span class="comment">// 三个成员的意义：大小、默认安全属性、是否可以继承</span></span><br><span class="line">SECURITY_ATTRIBUTES sa;</span><br><span class="line">sa.nLength = <span class="keyword">sizeof</span>(sa);</span><br><span class="line">sa.lpSecurityDescriptor = <span class="literal">NULL</span>;</span><br><span class="line">sa.bInheritHandle = TRUE;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个可以被继承的内核对象</span></span><br><span class="line">HANDLE g_hEvent = CreateEvent(&amp;sa, TRUE, FALSE, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 组织命令行参数</span></span><br><span class="line">sprintf_s(szHandle, <span class="number">8</span>, <span class="string">&quot;%d&quot;</span>, g_hEvent);</span><br><span class="line">sprintf_s(szBuffer, <span class="number">256</span>, <span class="string">&quot;C:\\Users\\lys05\\Desktop\\test3.exe %s&quot;</span>, szHandle);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义创建进程需要用到的结构体</span></span><br><span class="line">STARTUPINFOA si = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">si.cb = <span class="keyword">sizeof</span>(si);</span><br><span class="line"></span><br><span class="line">PROCESS_INFORMATION pi;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建子进程</span></span><br><span class="line">BOOL ret = CreateProcessA(</span><br><span class="line"><span class="literal">NULL</span>,</span><br><span class="line">szBuffer,</span><br><span class="line"><span class="literal">NULL</span>,</span><br><span class="line"><span class="literal">NULL</span>,</span><br><span class="line">TRUE,</span><br><span class="line">CREATE_NEW_CONSOLE,</span><br><span class="line"><span class="literal">NULL</span>,</span><br><span class="line"><span class="literal">NULL</span>,</span><br><span class="line">&amp;si, &amp;pi</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置事件为已通知</span></span><br><span class="line">SetEvent(g_hEvent);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭句柄 内核对象是否会被销毁？</span></span><br><span class="line">CloseHandle(g_hEvent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="进程B中的代码："><a href="#进程B中的代码：" class="headerlink" title="进程B中的代码："></a>进程B中的代码：</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span>* argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">CHAR szBuffer[<span class="number">256</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="built_in">memcpy</span>(szBuffer, argv[<span class="number">1</span>],<span class="number">8</span>);</span><br><span class="line">DWORD dwHandle = <span class="number">0</span>;</span><br><span class="line">sscanf_s(szBuffer, <span class="string">&quot;%d&quot;</span>, &amp;dwHandle);</span><br><span class="line">printf_s(<span class="string">&quot;%s\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">printf_s(<span class="string">&quot;%d\n&quot;</span>, dwHandle);</span><br><span class="line"></span><br><span class="line">HANDLE g_hEvent = (HANDLE)dwHandle;</span><br><span class="line">printf_s(<span class="string">&quot;.....开始等待\n&quot;</span>);</span><br><span class="line">WaitForSingleObject(g_hEvent, INFINITE);</span><br><span class="line">DWORD dwCode = GetLastError();</span><br><span class="line">printf_s(<span class="string">&quot;%d\n&quot;</span>, dwCode);</span><br><span class="line">printf_s(<span class="string">&quot;等到消息.....\n&quot;</span>);</span><br><span class="line">getchar();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思路就是进程A创建出一个可继承的事件，然后进程A创建出进程B，并且让进程B继承进程A的句柄表，此时B的句柄表中就就有A创建的事件的句柄，A创建B时又是通过命令行传参，此时B就可以通过参数获得事件的句柄，然后存到g_hEvent当中，接下来就是等待线程A将事件设置成已通知了。然后B就可以进行往下执行了</p><p><img src="/./win32-create-process/image-20240916224020671.png" alt="image-20240916224020671"></p><p>可以看到已经输出了等待到消息，可以说明进程B继承了A的句柄表</p><p><strong>注意：</strong> 这里参数传递有个坑，当我们要用sscanf将g_hEvent传到szBuffer中，里面如果用”%d”，则线程B中获取sprintf中的占位符也要用”%d”</p><p>形象化：</p><p><img src="/./win32-create-process/image-20240916224324742.png" alt="image-20240916224324742"></p><p><img src="/./win32-create-process/image-20240916224335478.png" alt="image-20240916224335478"></p><p><img src="/./win32-create-process/image-20240916224345497.png" alt="image-20240916224345497"></p>]]></content>
      
      
      <categories>
          
          <category> 滴水三期 </category>
          
          <category> win32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 滴水三期 </tag>
            
            <tag> win32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>win32事件</title>
      <link href="/2024/09/15/win32%E4%BA%8B%E4%BB%B6/"/>
      <url>/2024/09/15/win32%E4%BA%8B%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="内核对象"><a href="#内核对象" class="headerlink" title="内核对象"></a>内核对象</h1><hr><hr><h2 id="1、什么是内核对象"><a href="#1、什么是内核对象" class="headerlink" title="1、什么是内核对象"></a>1、什么是内核对象</h2><hr><p><img src="/../images/1.png" alt="avater"></p><h3 id="内核对象："><a href="#内核对象：" class="headerlink" title="内核对象："></a>内核对象：</h3><ul><li>进程</li><li>线程</li><li>文件</li><li>文件映射</li><li>事件</li><li>互斥体等待</li></ul><h2 id="2、事件内核创建"><a href="#2、事件内核创建" class="headerlink" title="2、事件内核创建"></a>2、事件内核创建</h2><hr><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">HANDLE <span class="title function_">CreateEventA</span><span class="params">(</span></span><br><span class="line"><span class="params">  [in, optional] LPSECURITY_ATTRIBUTES lpEventAttributes,</span></span><br><span class="line"><span class="params">  [in]           BOOL                  bManualReset,</span></span><br><span class="line"><span class="params">  [in]           BOOL                  bInitialState,</span></span><br><span class="line"><span class="params">  [in, optional] LPCSTR                lpName</span></span><br><span class="line"><span class="params">)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建事件内核对象</span></span><br><span class="line">HANDLE g_hEvent = CreateEvent(<span class="literal">NULL</span>,TRUE,FALSE,<span class="string">&quot;XYZ&quot;</span>);</span><br><span class="line"><span class="comment">// 创建互斥体对象</span></span><br><span class="line">HANDLE g_hMutex = CreateMutex(<span class="literal">NULL</span>,FALSE,<span class="string">&quot;XYZ&quot;</span>)</span><br></pre></td></tr></table></figure><p><code>CreateEvent</code> 函数参数解释：</p><ul><li><code>lpEventAttributes</code> : 安全属性</li><li><code>bManualReset</code> : 如果值为TRUE，在获取事件对象后要手动设置未通知；如果为FALSE，则自动变成未通知</li><li><code>bInitialState</code> : 设置事件初始发送信号的状态，TRUE为初始已通知，FALSE为初始未通知</li><li><code>lpName</code> : 事件对象的名称。(只用在进程间才需要用到)</li></ul><h2 id="3、事件内核对象的获取"><a href="#3、事件内核对象的获取" class="headerlink" title="3、事件内核对象的获取"></a>3、事件内核对象的获取</h2><hr><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">HANDLE <span class="title function_">OpenEvent</span><span class="params">(</span></span><br><span class="line"><span class="params">DWORD dwDesiredAccess,    <span class="comment">// access</span></span></span><br><span class="line"><span class="params">BOOL bInheritHandle,      <span class="comment">// ingeritance option</span></span></span><br><span class="line"><span class="params">LPCTSTR lpName            <span class="comment">// object name</span></span></span><br><span class="line"><span class="params">)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事件内核对象的获取</span></span><br><span class="line">HANDLE g_hEvent = OpenEvent(EVENT_ALL_ACCESS , FALSE,<span class="string">&quot;XYZ&quot;</span>);</span><br><span class="line"><span class="comment">// 互斥体内核对象的获取</span></span><br><span class="line">HANDLE g_hMutex = OpenMutex(MUTEX_ALL_ACCESS,FALSE,<span class="string">&quot;XYZ&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="4、内核对象的销毁"><a href="#4、内核对象的销毁" class="headerlink" title="4、内核对象的销毁"></a>4、内核对象的销毁</h2><hr><p><code>BOOL CloseHandle(HANDLE hobj);</code></p><ol><li>当没有其他程序引用时，系统会销毁内核对象（使用数量）</li><li>内核对象的生命周期，可能比创建它的对象要长</li></ol><h3 id="实验验证："><a href="#实验验证：" class="headerlink" title="实验验证："></a>实验验证：</h3><p>进程一创建内核对象，进程二获取内核对象，进程一销毁内核对象，进程三依旧可以获取内核对象，通俗个人理解：因为有两个人在使用，一个人销毁了，还有另外一个人可以找</p><ul><li>首先要明白<strong>计数器</strong>的概念，在高2g内存(内核)有一个结构体存储着这些参数，进程一创建对象，计数器+1，进程二获取对象，计数器+1，进程一销毁对象，计数器-1，所以当进程三去获取内核对象时，计数器里面还剩1个可以获取</li></ul><h1 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h1><hr><hr><h2 id="1、事件对象的创建"><a href="#1、事件对象的创建" class="headerlink" title="1、事件对象的创建"></a>1、事件对象的创建</h2><hr><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">HANDLE <span class="title function_">CreateEvent</span><span class="params">(</span></span><br><span class="line"><span class="params">LPSECURITY_ATTRIBUTES lpEventAttributes,      <span class="comment">// 安全属性 NULL时为系统默认</span></span></span><br><span class="line"><span class="params">BOOL bManualReset,                            <span class="comment">// TRUE 通过调用ResetEvent将事件对象标记为未通知</span></span></span><br><span class="line"><span class="params">BOOL bInitialState,                           <span class="comment">// TRUE 已通知状态 FALSE未通知状态（初始）</span></span></span><br><span class="line"><span class="params">LPCTSTR lpName                                <span class="comment">// 对象名称，以NULL结尾的字符串</span></span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure><h2 id="2、事件对象的控制"><a href="#2、事件对象的控制" class="headerlink" title="2、事件对象的控制"></a>2、事件对象的控制</h2><hr><p><code>BOOL SetEvent(HANDLE hEvent);</code>  &#x2F;&#x2F; 将对象设置为已通知</p><h3 id="对已通知、未通知的理解："><a href="#对已通知、未通知的理解：" class="headerlink" title="对已通知、未通知的理解："></a>对已通知、未通知的理解：</h3><p>简单来说就是未通知时，不会发出信号，其他线程会在WaitForSingleObject的作用下阻塞，当对象变成已通知时，获取到对象的线程才能通过WaitForSingleObject进行执行下去</p><h2 id="3、线程控制实验：只读形式的线程控制"><a href="#3、线程控制实验：只读形式的线程控制" class="headerlink" title="3、线程控制实验：只读形式的线程控制"></a>3、线程控制实验：只读形式的线程控制</h2><hr><h3 id="实验一："><a href="#实验一：" class="headerlink" title="实验一："></a>实验一：</h3><p><code>CreateEvent</code> 的第二个参数设置成TRUE，即要手动设置成未通知</p><p>ThreadMain线程函数：</p><p><img src="/./../images/image-20240915190756532.png" alt="image-20240915190756532"></p><p>其他三个线程，开始时用WaitForSingleObject阻塞住：</p><p><img src="/./../images/image-20240915190825087.png" alt="image-20240915190825087"></p><p>当Thread1程序跑到<code>SetEvent</code>后，三个文本框同时出现1000，主线程里修改对象状态为已通知时，第一个线程wait到了，执行完后状态依旧是已通知（因为我们第二个参数为TRUE，需要手动使用设置成未通知），所以三个编辑框都可以读取到</p><p><img src="/./../images/image-20240915190845413.png" alt="image-20240915190845413"></p><h3 id="实验二："><a href="#实验二：" class="headerlink" title="实验二："></a>实验二：</h3><p><code>CreateEvent</code> 的第二个参数设置成FALSE，即Wait后自动设置成未通知</p><p>此时其他线程在函数执行完的位置要加上SetEvent(hEvent);来将事件对象设置成已通知</p><p><img src="/./../images/image-20240915190855897.png" alt="image-20240915190855897"></p><p>执行代码，下面三个文本框是一个一个变成1000的，因为设置成FALSE后当线程wait到事件对象时就会自动设置成未通知状态，其他线程就无法使用，得等到我这个线程用完并用SetEvent将其设置成已通知其他线程才能用，从而可以实现互斥</p><h1 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h1><hr><h2 id="1、什么是线程同步？"><a href="#1、什么是线程同步？" class="headerlink" title="1、什么是线程同步？"></a>1、什么是线程同步？</h2><hr><h3 id="线程同步："><a href="#线程同步：" class="headerlink" title="线程同步："></a>线程同步：</h3><p>通俗来讲就是两个或以上的线程运行要严格按照规定的某种先后次序来运行，这种先后次序依赖于要完成的特定的任务。按预定的先后次序运行。比如 A 任务的运行依赖于 B 任务产生的数据。</p><h3 id="线程互斥："><a href="#线程互斥：" class="headerlink" title="线程互斥："></a>线程互斥：</h3><p>与线程同步不同，线程互斥只是当这个线程运行时，其他线程不能运行，得等到我这个线程运行完才能执行，没有顺序要求</p><h2 id="2、代码实验"><a href="#2、代码实验" class="headerlink" title="2、代码实验"></a>2、代码实验</h2><hr><p>实现两个线程严格的交替输出。<br>首先先用互斥或者临界区来看看能不能实现：<br>代码1（临界区）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">CRITICAL_SECTION g_cs;</span><br><span class="line"><span class="type">int</span> g_Max = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> g_Number = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//生产者线程函数  </span></span><br><span class="line">DWORD WINAPI <span class="title function_">ThreadProduct</span><span class="params">(LPVOID pM)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; g_Max; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//互斥的访问缓冲区  </span></span><br><span class="line">EnterCriticalSection(&amp;g_cs);</span><br><span class="line">g_Number = <span class="number">1</span>;</span><br><span class="line">DWORD id = GetCurrentThreadId();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;生产者%d将数据%d放入缓冲区\n&quot;</span>, id, g_Number);</span><br><span class="line">LeaveCriticalSection(&amp;g_cs);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//消费者线程函数</span></span><br><span class="line">DWORD WINAPI <span class="title function_">ThreadConsumer</span><span class="params">(LPVOID pM)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; g_Max; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//互斥的访问缓冲区  </span></span><br><span class="line">EnterCriticalSection(&amp;g_cs);</span><br><span class="line">g_Number = <span class="number">0</span>;</span><br><span class="line">DWORD id = GetCurrentThreadId();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;----消费者%d将数据%d放入缓冲区\n&quot;</span>, id, g_Number);</span><br><span class="line">LeaveCriticalSection(&amp;g_cs);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">InitializeCriticalSection(&amp;g_cs);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">HANDLE hThread[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">hThread[<span class="number">0</span>] = ::CreateThread(<span class="literal">NULL</span>, <span class="number">0</span>, ThreadProduct, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">hThread[<span class="number">1</span>] = ::CreateThread(<span class="literal">NULL</span>, <span class="number">0</span>, ThreadConsumer, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">WaitForMultipleObjects(<span class="number">2</span>, hThread, TRUE, INFINITE);</span><br><span class="line">CloseHandle(hThread[<span class="number">0</span>]);</span><br><span class="line">CloseHandle(hThread[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">//销毁 </span></span><br><span class="line">DeleteCriticalSection(&amp;g_cs);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><p><img src="/./../images/image-20240915190909087.png" alt="image-20240915190909087"></p><p>代码2（互斥体）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">HANDLE hMutex;</span><br><span class="line"><span class="type">int</span> g_Max = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> g_Number = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//生产者线程函数  </span></span><br><span class="line">DWORD WINAPI <span class="title function_">ThreadProduct</span><span class="params">(LPVOID pM)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; g_Max; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//互斥的访问缓冲区  </span></span><br><span class="line">WaitForSingleObject(hMutex, INFINITE);</span><br><span class="line">g_Number = <span class="number">1</span>;</span><br><span class="line">DWORD id = GetCurrentThreadId();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;生产者%d将数据%d放入缓冲区\n&quot;</span>, id, g_Number);</span><br><span class="line">ReleaseMutex(hMutex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//消费者线程函数</span></span><br><span class="line">DWORD WINAPI <span class="title function_">ThreadConsumer</span><span class="params">(LPVOID pM)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; g_Max; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//互斥的访问缓冲区  </span></span><br><span class="line">WaitForSingleObject(hMutex, INFINITE);</span><br><span class="line">g_Number = <span class="number">0</span>;</span><br><span class="line">DWORD id = GetCurrentThreadId();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;----消费者%d将数据%d放入缓冲区\n&quot;</span>, id, g_Number);</span><br><span class="line">ReleaseMutex(hMutex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//创建一个互斥体</span></span><br><span class="line">hMutex = CreateMutex(<span class="literal">NULL</span>, FALSE, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">HANDLE hThread[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">hThread[<span class="number">0</span>] = ::CreateThread(<span class="literal">NULL</span>, <span class="number">0</span>, ThreadProduct, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">hThread[<span class="number">1</span>] = ::CreateThread(<span class="literal">NULL</span>, <span class="number">0</span>, ThreadConsumer, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">WaitForMultipleObjects(<span class="number">2</span>, hThread, TRUE, INFINITE);</span><br><span class="line">CloseHandle(hThread[<span class="number">0</span>]);</span><br><span class="line">CloseHandle(hThread[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">//销毁 </span></span><br><span class="line">CloseHandle(hMutex);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><p><img src="/./../images/20240912215204.png" alt="Pasted image 20240912215204"></p><p>发现不管时临界区，还是互斥体都无法实现严格的交替输出，这时，我们就可以用事件来实现。</p><blockquote><p>事件是可以自动设置成未通知，然后通过SetEvent来设置成已通知的，对于两个线程，我们就可以通过两个事件来实现线程同步，具体代码如下:</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">HANDLE hEvent1,hEvent2;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DWORD WINAPI <span class="title function_">ThreadProc1</span><span class="params">(LPVOID lpParameter)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">5</span>;i++)&#123;</span><br><span class="line">WaitForSingleObject(hEvent1, INFINITE);</span><br><span class="line">DWORD id = GetCurrentThreadId();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;生产者 %d 将数据 1 放入缓冲区\n&quot;</span>,id);</span><br><span class="line">SetEvent(hEvent2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DWORD WINAPI <span class="title function_">ThreadProc2</span><span class="params">(LPVOID lpParameter)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">WaitForSingleObject(hEvent2, INFINITE);</span><br><span class="line">DWORD id = GetCurrentThreadId();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;----消费者 %d 将数据 1 取出缓冲区\n&quot;</span>,id);</span><br><span class="line">SetEvent(hEvent1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">HANDLE hThread[<span class="number">2</span>];</span><br><span class="line">hThread[<span class="number">0</span>] = ::CreateThread(<span class="literal">NULL</span>, <span class="number">0</span>, ThreadProc1, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">hThread[<span class="number">1</span>] = ::CreateThread(<span class="literal">NULL</span>, <span class="number">0</span>, ThreadProc2, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">hEvent1 = CreateEvent(<span class="literal">NULL</span>, FALSE, TRUE, <span class="literal">NULL</span>);</span><br><span class="line">hEvent2 = CreateEvent(<span class="literal">NULL</span>, FALSE, FALSE, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">WaitForMultipleObjects(<span class="number">2</span>, hThread, TRUE, INFINITE);</span><br><span class="line">CloseHandle(hThread[<span class="number">0</span>]);</span><br><span class="line">CloseHandle(hThread[<span class="number">1</span>]);</span><br><span class="line">CloseHandle(hEvent1);</span><br><span class="line">CloseHandle(hEvent2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到输出已经是严格交替了：</p><p><img src="/./../images/image-20240915190925802.png" alt="image-20240915190925802"></p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><hr><ol><li>线程同步的实现：可以用事件来实现，有几个线程就创建多少个事件对象，全部都设置成自动变成未通知状态，第一个启动的线程要在将事件对象的初始状态设置成已通知，然后通过一个线程控制另一个线程的启动。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 滴水三期 </category>
          
          <category> win32 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/09/15/hello-world/"/>
      <url>/2024/09/15/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
